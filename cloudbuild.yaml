steps:
  ## Deploy backend
  - id: 'download-cached-maven-dependencies'
    name: gcr.io/cloud-builders/gsutil
    entrypoint: bash
    volumes:
      - name: 'maven-repository'
        path: '/root/.m2'
    args:
      - '-c'
      - |
        gsutil cp gs://${PROJECT_ID}_cloudbuild/cache/maven-dependencies.tgz maven-dependencies.tgz || exit 0
        tar -zxf maven-dependencies.tgz --directory / || exit 0
    ## Use || exit 0 to have the error ignored if cache file does not exist

  - id: 'build-project'
    name: adoptopenjdk/openjdk11:jdk-11.0.8_10
    dir: cloudcmr-back
    entrypoint: 'bash'
    volumes:
      - name: 'maven-repository'
        path: '/root/.m2'
    args:
      - '-c'
      - |
        ./mvnw install -DskipTests
        cp target/*-all.jar ./app.jar

  - id: 'dockerize-project'
    name: gcr.io/cloud-builders/docker
    dir: cloudcmr-back
    args: ['build',
           '-f', './src/main/docker/Dockerfile',
           '-t', 'gcr.io/$PROJECT_ID/cloudcmr-back:${SHORT_SHA}',
           '-t', 'gcr.io/$PROJECT_ID/cloudcmr-back:latest',
           '.']

  - id: 'upload-cached-maven-dependencies'
    name: gcr.io/cloud-builders/gsutil
    waitFor: ['build-project']
    entrypoint: bash
    volumes:
      - name: 'maven-repository'
        path: '/root/.m2'
    args:
      - '-c'
      - |
        tar -zcf maven-dependencies.tgz /root/.m2
        gsutil cp maven-dependencies.tgz gs://${PROJECT_ID}_cloudbuild/cache/maven-dependencies.tgz

  - id: 'push-to-cloud-registry'
    waitFor: ['dockerize-project']
    name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/cloudcmr-back:${SHORT_SHA}']

  # Deploy container image to Cloud Run
  - id: 'deploy-cloud-run'
    waitFor: ['push-to-cloud-registry']
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - '-c'
      - |
        apt-get install -qq -y gettext
        export IMAGE_VERSION=${SHORT_SHA}
        export DATASTORE_NAMESPACE=${_DATASTORE_NAMESPACE}
        envsubst < cloudcmr-back-service.yaml > cloudcmr-back-service_with_env.yaml
        gcloud beta run services replace cloudcmr-back-service_with_env.yaml \
          --platform=managed --region=europe-west1
        gcloud run services add-iam-policy-binding cloudcmr-back \
          --platform=managed --region=europe-west1 \
          --member="allUsers" --role="roles/run.invoker"

  ## Deploy frontEnd
  - id: 'download-cached-yarn-dependencies'
    waitFor: ['-']
    name: gcr.io/cloud-builders/gsutil
    dir: cloudcmr-front
    entrypoint: bash
    args:
      - '-c'
      - |
        gsutil cp gs://${PROJECT_ID}_cloudbuild/cache/yarn-dependencies.tgz yarn-dependencies.tgz || exit 0
        tar -zxf yarn-dependencies.tgz || exit 0

  - id: 'install-yarn'
    waitFor: ['download-cached-yarn-dependencies']
    name: node
    entrypoint: yarn
    dir: cloudcmr-front
    args: ['install', '--silent']
  - id: 'build-front'
    waitFor: ['install-yarn']
    name: node
    entrypoint: /bin/bash
    dir: cloudcmr-front
    args:
      - '-c'
      - |
        VUE_APP_SERVER_URL=${_SERVER_URL} yarn build
  - id: 'deploy-firebase'
    name: gcr.io/${PROJECT_ID}/firebase
    waitFor: ['build-front']
    args: ['deploy', '--project=${PROJECT_ID}', '--only', 'hosting:${_FIREBASE_SITE}']
    dir: cloudcmr-front

  - id: 'upload-cached-yarn-dependencies'
    waitFor: ['build-front']
    name: gcr.io/cloud-builders/gsutil
    entrypoint: bash
    dir: cloudcmr-front
    args:
      - '-c'
      - |
        tar -zcf yarn-dependencies.tgz ./node_modules
        gsutil cp yarn-dependencies.tgz gs://${PROJECT_ID}_cloudbuild/cache/yarn-dependencies.tgz
images:
  - 'gcr.io/$PROJECT_ID/cloudcmr-back:${SHORT_SHA}'
  - 'gcr.io/$PROJECT_ID/cloudcmr-back:latest'